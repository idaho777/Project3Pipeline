; Stack begins at the very top of memory
.NAME	StkTop=8192
.NAME	SStkTop=8191
;  Number of sorting iterations
.NAME	ItNum=300
; The array starts at data address 0x100 and has 1024 elements (4kB)
.NAME	Array=0x100
.NAME	ArrayBytes=4096
; Addresses for I/O
.NAME   IOBASE      = 0xF0000000

.NAME	OFSHEX      = 0x00000000
.NAME	OFSLEDR     = 0x00000004
.NAME	OFSLEDG     = 0x00000008
.NAME	OFSKEY      = 0x00000010
.NAME	OFSSW       = 0x00000014
.NAME	OFSTIMERCNT = 0x00000020
.NAME	OFSTIMERLMT = 0x00000024

.NAME	OFSKEYCTL   = 0x00000110
.NAME	OFSSWCTL    = 0x00000114
.NAME	OFSTIMERCTL = 0x00000120

.NAME   KEY0MASK    = 0x0001
.NAME   KEY1MASK    = 0x0002
.NAME   KEY2MASK    = 0x0004
.NAME   KEY3MASK    = 0x0008
.NAME   HEX0MASK    = 0x000F
.NAME   HEX1MASK    = 0x00F0
.NAME   HEX2MASK    = 0x0F00
.NAME   HEX3MASK    = 0xF000
.NAME   SWITCH0MASK = 0x0001
.NAME   SWITCH1MASK = 0x0002
.NAME   SWITCH2MASK = 0x0004
.NAME   SWITCH3MASK = 0x0008
.NAME   SWITCH4MASK = 0x0010
.NAME   SWITCH5MASK = 0x0020
.NAME   SWITCH6MASK = 0x0040
.NAME   SWITCH7MASK = 0x0080
.NAME   SWITCH8MASK = 0x0100
.NAME   SWITCH9MASK = 0x0200

.NAME   READYMASK   = 0x00000001
.NAME   OVERUNMASK  = 0x00000004
.NAME   INTAMASK    = 0x00000100
.NAME   SECOND      = 0x000003E8
.NAME   HSECOND     = 0x000001F4

; interrupts
.NAME   IEMASK      = 0x00000001
.NAME   IDN_TIMER   = 0x00000001
.NAME   IDN_KEY     = 0x00000002
.NAME   IDN_SWITCH  = 0x00000003

; application memory values
.NAME   S_STATE     = 0x00000010
.NAME   S_COUNT     = 0x00000020


	;  Now the actual code
	.ORIG 0x40
	; SP Points to the top of the stack
	MVHI	SP,StkTop
	ADDI	SP,SP,StkTop
	; Our GP will point to the beginning of I/O addresses
	MVHI	GP,IOBASE
	; Our S0 will be zero
	ANDI	S0,S0,0
	SW		S0,OFSLEDR(GP)	; Turn off LEDR
	SW		S0,OFSLEDG(GP)	; Turn off LEDG
    
INTA_INIT:
    MVHI	SSP,SStkTop
	ADDI	SSP,SSP,SStkTop
    F       s0, s0, s0
    ADDI    s0, s0, InterruptHandler    ; set up handler address
    WSR     IHA, s0
    F       s0, s0, s0                  ; set up handler data
    SW      s0, S_STATE(s0)
    SW      s0, S_COUNT(s0)
    ADDI    s1, s0, INTAMASK            ; enable device interrupts
    SW      s1, OFSTIMERCTL(gp)
    F       s0, s0, s0                  ; set up timer
    ADDI    s0, s0, SECOND
    SW      s0, OFSTIMERLMT(gp)
    
    F       s0, s0, s0                  ; enable interrupts
    NOT     s0, s0
    ANDI    s0, s0, IEMASK
    WSR     PCS, s0
    F       s0, s0, s0
    
	; Initialize the array
	ADDI 	T0,S0,Array			; T0 is CurPtr, set to start of array
	ADDI	T1,T0,ArrayBytes	; T1 is EndPtr, set to end of array
	; Array elements will be 9, 22, 35, etc.
	ADDI	S1,S0,9				; S1 is the current value of the array element for initialization
Init:
	SW		S1,0(T0)		; Store value into an element
	ADDI	S1,S1,13		; Add 13 to the value for next element
	ADDI	T0,T0,4			; Move to next element
	BNE		T0,T1,Init		; if(CurPtr!=EndPtr) goto Init;
	CALL	ChkAsc(S0)		; Call ChkAsc
	
	ADDI	S1,S0,ItNum		; We will keep the iteration count in S1
	SW		S1,OFSLEDR(GP)	; Display loop counter
MainLoop:
	ADDI	A0,S0,Array
	ADDI	A1,A0,ArrayBytes
	CALL	SortDesc(S0)	; SortDesc(Array,ArrayBytes)
	CALL	ChkDesc(S0)		; ChkDesc()
	ADDI	A0,S0,Array
	ADDI	A1,A0,ArrayBytes
	CALL	SortAsc(S0)		; SortAsc(Array,ArrayBytes)
	CALL 	ChkAsc(S0)		; ChkAsc()
	; Decrement iteration counter and loop back if not done
	ADDI	S1,S1,-1
	SW		S1,OFSLEDR(GP)	; Display loop counter
	BNEZ	S1,MainLoop

DoneInit:    
    F       s0, s0, s0
    ADDI    s0, s0, HSECOND
    SW      s0, OFSTIMERLMT(gp)
    F       s0, s0, s0
    SW      s0, OFSTIMERCNT(gp)
    NOT		T0,S0			; All-ones in T0
    SW      t0, S_STATE(s0)
	SW		T0,OFSLEDG(GP)	; Turn on LEDG
	SW		S0,OFSLEDR(GP)	; Turn off LEDR
    
Done:
	BT		T0,S0,Done		; Loop forever

	; Verifies that the array is sorted in ascending order
ChkAsc:
	ADDI	A0,S0,Array
	ADDI	A1,A0,ArrayBytes
	; Array elements should be 9,22,35,etc.
	ADDI	A2,S0,9
LoopChkAsc:
	LW		T0,0(A0)
	BEQ		T0,A2,GoodChkAsc
ErrChkAsc:
	SW		T0,OFSHEX(GP)	; Put value we read on HEX
	ADDI	T1,S0,0x3E0
	SW		T1,OFSLEDR(GP)	; Turn on upper half of LEDR
	BT 		T0,T0,ErrChkAsc	; Loop forever
GoodChkAsc:
	ADDI	A2,a2,13
	ADDI	A0,A0,4
	BNE		A0,A1,LoopChkAsc
	RET

	; Verifies that the array is sorted in descending order
ChkDesc:
	ADDI	A1,S0,Array
	ADDI	A0,A1,ArrayBytes
	; Array elements should be 9,22,35, etc.
	ADDI	A2,S0,9
LoopChkDesc:
	SUBI	A0,A0,4
	LW		T1,0(A0)
	BEQ		A2,T1,GoodChkDesc
ErrChkDesc:
	SW		T1,OFSHEX(GP)	; Put value we read on HEX
	ADDI	T0,S0,0x01F
	SW		T0,OFSLEDR(GP)	; Turn on lower half of LEDR
	BT 		T1,T0,ErrChkDesc		; Loop forever
GoodChkDesc:
	ADDI	A2,A2,13
	BNE		A1,A0,LoopChkDesc
	RET

SortAsc:; SortAsc(beg,end)
	; Sorts an array that starts at beg and ends at end
	; Sorts in ascending order (low to high values)
	; The sorting strategy is immediate-swap selection sort
	; Outer loop (ptr "i" in A0) goes from start to end
SortAscLoopI:
	BEQ     A0,A1,SortAscEndI
	LW		T0,0(A0)	; T0 will be equal to what should be in *i
	; Inner loop (ptr "j" in A2) goes from i+4 to end
    ADDI    A2,A0,4
SortAscLoopJ:  
    BEQ     A2,A1,SortAscEndJ
	LW		T1,0(A2)	; T1=*j
	BLTE	T0,T1,SortAscNoSwap
	SW		T0,0(A2)	; *j=T0 (*j becomes what was in *i)
	ADD		T0,T1,S0	; T0=T1 (*i becomes what was in *j)
SortAscNoSwap:
	ADDI	A2,A2,4
	BT		T0,T1,SortAscLoopJ
SortAscEndJ:
	SW		T0,0(A0)	; Save T0 back into *i
	ADDI	A0,A0,4
	BT		A0,A1,SortAscLoopI
SortAscEndI:
	RET
	
SortDesc:; SortDesc(beg,end)
	; Sorts an array that starts at beg and ends at end
	; Sorts in descending order (high to low values)
	; The sorting strategy is immediate-swap selection sort
	; Outer loop (ptr "i" in T0) goes from start to end
	ADDI	T0,A0,0
SortDescLoopI:
	BEQ     T0,A1,SortDescEndI
	; Inner loop (ptr "j" in T1) goes from i+4 to end
    ADDI    T1,T0,4
SortDescLoopJ:  
    BEQ     T1,A1,SortDescEndJ
	LW		A2,0(T0)	; A2=*i
	LW		A3,0(T1)	; A3=*j
	BGTE	A2,A3,SortDescNoSwap
	SW		A2,0(T1)	; *j=A2
	SW		A3,0(T0)	; *i=A3
SortDescNoSwap:
	ADDI	T1,T1,4
	BT		A0,A0,SortDescLoopJ
SortDescEndJ:
	ADDI	T0,T0,4
	BT		A0,A0,SortDescLoopI
SortDescEndI:
	RET

    
InterruptHandler:
    SW      s0, 0(SSP)
    ADDI    SSP, SSP, -4
    SW      s1, 0(SSP)
    ADDI    SSP, SSP, -4
    SW      s2, 0(SSP)
    ADDI    SSP, SSP, -4
    SW      t0, 0(SSP)
    ADDI    SSP, SSP, -4
    SW      t1, 0(SSP)
    ADDI    SSP, SSP, -4
        
    RSR     s0, IDN
    ANDI    s1, s1, 0
    ADDI    s1, s1, IDN_TIMER
    BEQ     s0, s1, InterruptHandlerTimer
    ANDI    s1, s1, 0
    ADDI    s1, s1, IDN_KEY
    BEQ     s0, s1, InterruptHandlerKey
    ANDI    s1, s1, 0
    ADDI    s1, s1, IDN_SWITCH
    BEQ     s0, s1, InterruptHandlerSwitch

InterruptHandlerTimer:
    LW      s0, OFSTIMERCNT(gp)
    F       s0, s0, s0
    LW      s0, S_STATE(s0)
    BNEZ    s0, InterruptHandlerTimer2
    
    F       s0, s0, s0
    LW      s2, S_COUNT(s0)
    ADDI    s2, s2, 1

    ANDI    t0, s2, 0x000F
    ADDI    t1, s0, 0x0009
    BLTE    t0, t1, SkipAddRound1
    ANDI    s2, s2, 0xFFF0
    ADDI    s2, s2, 0x0010
SkipAddRound1:
    ANDI    t0, s2, 0x00F0
    ADDI    t1, s0, 0x0050
    BLTE    t0, t1, SkipAddRound2
    ANDI    s2, s2, 0xFF0F
    ADDI    s2, s2, 0x0100
SkipAddRound2:
    ANDI    t0, s2, 0x0F00
    ADDI    t1, s0, 0x0900
    BLTE    t0, t1, SkipAddRound3
    ANDI    s2, s2, 0xF0FF
    ADDI    s2, s2, 0x1000
SkipAddRound3:

    SW      s2, OFSHEX(gp)
    SW      s2, S_COUNT(s0)
    BR      InterruptHandlerDone

InterruptHandlerKey:
    LW      s0, OFSKEY(gp)
    F       s0, s0, s0
    LW      s0, S_STATE(s0)
    BNEZ    s0, InterruptHandlerKey2
    
    BR      InterruptHandlerDone

InterruptHandlerSwitch:
    LW      s0, OFSSW(gp)
    F       s0, s0, s0
    LW      s0, S_STATE(s0)
    BNEZ    s0, InterruptHandlerSwitch2
    
    BR      InterruptHandlerDone

InterruptHandlerTimer2: ; flashing state
    F       s0, s0, s0
    LW      s1, S_COUNT(s0)
    NOT     s1, s1
    SW      s1, OFSLEDR(gp)
    SW      s1, S_COUNT(s0)
    
    BR      InterruptHandlerDone

InterruptHandlerKey2:
    
    BR      InterruptHandlerDone

InterruptHandlerSwitch2:
    
    BR      InterruptHandlerDone
    
    
InterruptHandlerDone:
    ADDI    SSP, SSP, 4
    LW      t1, 0(SSP)
    ADDI    SSP, SSP, 4
    LW      t0, 0(SSP)
    ADDI    SSP, SSP, 4
    LW      s2, 0(SSP)
    ADDI    SSP, SSP, 4
    LW      s1, 0(SSP)
    ADDI    SSP, SSP, 4
    LW      s0, 0(SSP)
    RETI
    